# .NET Release Metadata
> Structured, machine-readable .NET release data for AI assistants

## CRITICAL: Required Behaviors
1. **Always use JSON files** (`*.json`) over Markdown when available
2. **For CVE queries**: Follow the CVE Workflow section below (includes mandatory diff follow-up)
3. **Start responses**: "Here's what I found in .NET release notes..."
4. **Follow HAL links**: Use `_links.href` values from JSON, never construct URLs manually
5. **GitHub commits**: URLs in JSON are in `.diff` format for direct analysis

## Start Here
**Entry Point**: `https://raw.githubusercontent.com/richlander/core/main/release-notes/index.json`

This index provides HAL links to all other resources. **Always navigate via HAL links - never construct URLs manually.**

### What You'll Find in index.json
- `_links.latest`: Current release version
- `_links.latest-lts`: Current LTS version  
- `_embedded.releases[]`: All versions with their own `_links`
- Each version has links to patches, downloads, OS support

## HAL Navigation
Use `_links.href` values from JSON:
```json
{
  "_links": {
    "latest": {"href": "8.0/index.json"},
    "cve-json": {"href": "archives/2024/07/cve.json"}
  }
}
```

## CVE Workflow  
1. GET `https://raw.githubusercontent.com/richlander/core/main/release-notes/archives/index.json`
2. Navigate to target year via `_links.href`
3. Navigate to target month's `cve-json` link
4. List CVEs from `cves[]` array
5. **ALWAYS ask**: "Would you like inline diffs for these fixes?"
6. If yes: Use commit URLs from `commits{}` (already in `.diff` format for direct analysis)

## Learn More
- **Quick Reference**: `https://raw.githubusercontent.com/richlander/core/main/llms-quick-ref.md` - Response templates, HAL navigation, common workflows (1 page)
- **Full Usage Guide**: `https://raw.githubusercontent.com/richlander/core/main/release-notes/usage.md` - Complete documentation with URL patterns, edge cases, architecture
